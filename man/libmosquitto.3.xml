<?xml version='1.0' encoding='UTF-8'?>
<?xml-stylesheet type="text/xsl" href="manpage.xsl"?>

<refentry xml:id="libmosquitto" xmlns:xlink="http://www.w3.org/1999/xlink">
	<refmeta>
		<refentrytitle>libmosquitto</refentrytitle>
		<manvolnum>3</manvolnum>
		<refmiscinfo class="source">Mosquitto Project</refmiscinfo>
		<refmiscinfo class="manual">Library calls</refmiscinfo>
	</refmeta>

	<refnamediv>
		<refname>libmosquitto</refname>
		<refpurpose>MQTT version 3.1 client library</refpurpose>
	</refnamediv>

	<refsect1>
		<title>Description</title>
		<para>This is an overview of how to use libmosquitto to create MQTT
		aware client programs. There may be separate man pages on each of the
		functions described here in the future. There is also a binding for
		libmosquitto for C++ and a Python implementation. They are not
		documented here but operate in a similar way.</para>
		<para>This is fairly incomplete, please see mosquitto.h for a better
		description of the functions.</para>
	</refsect1>

	<refsect1>
		<title>libmosquitto symbol names</title>
		<para>All public functions in libmosquitto have the prefix
		"mosquitto_". Any other functions defined in the source code are to be
		treated as private functions and may change between any release. Do not
		use these functions!</para>
	</refsect1>

	<refsect1>
		<title>Functions</title>

		<refsect2>
			<title>Library version</title>

			<para>
			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_lib_version</function></funcdef>
			<paramdef><parameter>int *major</parameter></paramdef>
			<paramdef><parameter>int *minor</parameter></paramdef>
			<paramdef><parameter>int *revision</parameter></paramdef>
			</funcprototype></funcsynopsis>
			</para>
			<para>Obtain version information about the library. If any of
			major, minor or revision are not NULL they will return the
			corresponding version numbers. The return value is an integer
			representation of the complete version number (e.g. 1009001 for 1.9.1)
			that can be used for comparisons.</para>
		</refsect2>

		<refsect2>
			<title>Library initialisation and cleanup</title>

			<para>
			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_lib_init</function></funcdef>
			<void/></funcprototype></funcsynopsis>

			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_lib_cleanup</function></funcdef>
			<void/></funcprototype></funcsynopsis>
			</para>
			<para>Call mosquitto_lib_init() before using any of the other
				library functions and mosquitto_lib_cleanup() after finishing
				with the library.</para>
		</refsect2>

		<refsect2>
			<title>Client constructor/destructor</title>

			<para>
			<funcsynopsis><funcprototype><funcdef>struct mosquitto *<function>mosquitto_new</function></funcdef>
			<paramdef><parameter>const char *id</parameter></paramdef>
			<paramdef><parameter>bool clean_session</parameter></paramdef>
			<paramdef><parameter>void *obj</parameter></paramdef>
			</funcprototype></funcsynopsis>
			</para>
			<para>Create a new mosquitto client instance.</para>

			<para>
			<funcsynopsis><funcprototype><funcdef>void <function>mosquitto_destroy</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			</funcprototype></funcsynopsis>
			</para>
			<para>Use to free memory associated with a mosquitto client instance.</para>
		</refsect2>

		<refsect2>
			<title>Authentication and encryption</title>

			<para>
			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_username_pw_set</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			<paramdef><parameter>const char *username</parameter></paramdef>
			<paramdef><parameter>const char *password</parameter></paramdef>
			</funcprototype></funcsynopsis>

			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_ssl_set</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			<paramdef><parameter>const char *cafile</parameter></paramdef>
			<paramdef><parameter>const char *capath</parameter></paramdef>
			<paramdef><parameter>const char *certfile</parameter></paramdef>
			<paramdef><parameter>const char *keyfile</parameter></paramdef>
			<paramdef><parameter>int (*pw_callback)(char *buf, int size, int rwflag, void *userdata)</parameter></paramdef>
			</funcprototype></funcsynopsis>


			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_ssl_opts_set</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			<paramdef><parameter>int cert_reqs</parameter></paramdef>
			<paramdef><parameter>const char *ssl_version</parameter></paramdef>
			<paramdef><parameter>const char *ciphers</parameter></paramdef>
			</funcprototype></funcsynopsis>

			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_tls_psk_set</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			<paramdef><parameter>const char *psk</parameter></paramdef>
			<paramdef><parameter>const char *identity</parameter></paramdef>
			</funcprototype></funcsynopsis>
			</para>
		</refsect2>

		<refsect2>
			<title>Wills</title>

			<para>
			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_will_set</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			<paramdef><parameter>const char *topic</parameter></paramdef>
			<paramdef><parameter>int payloadlen</parameter></paramdef>
			<paramdef><parameter>const void *payload</parameter></paramdef>
			<paramdef><parameter>int qos</parameter></paramdef>
			<paramdef><parameter>bool retain</parameter></paramdef>
			</funcprototype></funcsynopsis>

			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_will_clear</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			</funcprototype></funcsynopsis>
			</para>
		</refsect2>

		<refsect2>
			<title>Connect/disconnect</title>

			<para>
			<funcsynopsis><funcprototype><funcdef>void <function>mosquitto_connect</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			<paramdef><parameter>const char *host</parameter></paramdef>
			<paramdef><parameter>int port</parameter></paramdef>
			<paramdef><parameter>int keepalive</parameter></paramdef>
			</funcprototype></funcsynopsis>

			<funcsynopsis><funcprototype><funcdef>void <function>mosquitto_connect_async</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			<paramdef><parameter>const char *host</parameter></paramdef>
			<paramdef><parameter>int port</parameter></paramdef>
			<paramdef><parameter>int keepalive</parameter></paramdef>
			</funcprototype></funcsynopsis>

			<funcsynopsis><funcprototype><funcdef>void <function>mosquitto_reconnect</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			</funcprototype></funcsynopsis>

			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_disconnect</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			</funcprototype></funcsynopsis>
			</para>
		</refsect2>

		<refsect2>
			<title>Publish</title>

			<para>
			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_publish</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			<paramdef><parameter>int *mid</parameter></paramdef>
			<paramdef><parameter>const char *topic</parameter></paramdef>
			<paramdef><parameter>int payloadlen</parameter></paramdef>
			<paramdef><parameter>const void *payload</parameter></paramdef>
			<paramdef><parameter>int qos</parameter></paramdef>
			<paramdef><parameter>bool retain</parameter></paramdef>
			</funcprototype></funcsynopsis>
			</para>
		</refsect2>

		<refsect2>
			<title>Subscribe/unsubscribe</title>

			<para>
			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_subscribe</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			<paramdef><parameter>int *mid</parameter></paramdef>
			<paramdef><parameter>const char *sub</parameter></paramdef>
			<paramdef><parameter>int qos</parameter></paramdef>
			</funcprototype></funcsynopsis>

			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_unsubscribe</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			<paramdef><parameter>int *mid</parameter></paramdef>
			<paramdef><parameter>const char *sub</parameter></paramdef>
			</funcprototype></funcsynopsis>
			</para>
		</refsect2>

		<refsect2>
			<title>Network loop</title>

			<para>
			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_loop</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			<paramdef><parameter>int timeout</parameter></paramdef>
			<paramdef><parameter>int max_packets</parameter></paramdef>
			</funcprototype></funcsynopsis>

			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_loop_read</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			<paramdef><parameter>int max_packets</parameter></paramdef>
			</funcprototype></funcsynopsis>

			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_loop_write</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			<paramdef><parameter>int max_packets</parameter></paramdef>
			</funcprototype></funcsynopsis>

			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_loop_misc</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			</funcprototype></funcsynopsis>

			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_socket</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			</funcprototype></funcsynopsis>

			<funcsynopsis><funcprototype><funcdef>bool <function>mosquitto_want_write</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			</funcprototype></funcsynopsis>
			</para>
		</refsect2>

		<refsect2>
			<title>Threaded network loop</title>

			<para>
			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_loop_start</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			</funcprototype></funcsynopsis>

			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_loop_stop</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			<paramdef><parameter>bool force</parameter></paramdef>
			</funcprototype></funcsynopsis>
			</para>
		</refsect2>

		<refsect2>
			<title>Misc client functions</title>

			<para>
			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_message_retry_set</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			<paramdef><parameter>unsigned int message_retry</parameter></paramdef>
			</funcprototype></funcsynopsis>

			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_user_data_set</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			<paramdef><parameter>void *obj</parameter></paramdef>
			</funcprototype></funcsynopsis>
			</para>
		</refsect2>

		<refsect2>
			<title>Callbacks</title>

			<para>
			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_connect_callback_set</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			<paramdef><parameter>void (*on_connect)(struct mosquitto *, void *, int)</parameter></paramdef>
			</funcprototype></funcsynopsis>

			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_disconnect_callback_set</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			<paramdef><parameter>void (*on_disconnect)(struct mosquitto *, void *, int)</parameter></paramdef>
			</funcprototype></funcsynopsis>

			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_publish_callback_set</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			<paramdef><parameter>void (*on_publish)(struct mosquitto *, void *, int)</parameter></paramdef>
			</funcprototype></funcsynopsis>

			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_message_callback_set</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			<paramdef><parameter>void (*on_message)(struct mosquitto *, void *, const struct mosquitto_message *)</parameter></paramdef>
			</funcprototype></funcsynopsis>

			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_subscribe_callback_set</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			<paramdef><parameter>void (*on_subscribe)(struct mosquitto *, void *, int, int, const int *)</parameter></paramdef>
			</funcprototype></funcsynopsis>

			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_unsubscribe_callback_set</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			<paramdef><parameter>void (*on_unsubscribe)(struct mosquitto *, void *, int)</parameter></paramdef>
			</funcprototype></funcsynopsis>

			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_log_callback_set</function></funcdef>
			<paramdef><parameter>struct mosquitto *mosq</parameter></paramdef>
			<paramdef><parameter>void (*on_unsubscribe)(struct mosquitto *, void *, int, const char *)</parameter></paramdef>
			</funcprototype></funcsynopsis>
			</para>
		</refsect2>

		<refsect2>
			<title>Utility functions</title>
			<para>

			<funcsynopsis><funcprototype><funcdef>const char *<function>mosquitto_connack_string</function></funcdef>
			<paramdef><parameter>int connack_code</parameter></paramdef>
			</funcprototype></funcsynopsis>

			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_message_copy</function></funcdef>
			<paramdef><parameter>struct mosquitto_message *dst</parameter></paramdef>
			<paramdef><parameter>const struct mosquitto_message *src</parameter></paramdef>
			</funcprototype></funcsynopsis>

			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_message_free</function></funcdef>
			<paramdef><parameter>struct mosquitto_message **message</parameter></paramdef>
			</funcprototype></funcsynopsis>

			<funcsynopsis><funcprototype><funcdef>const char *<function>mosquitto_strerror</function></funcdef>
			<paramdef><parameter>int mosq_errno</parameter></paramdef>
			</funcprototype></funcsynopsis>

			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_sub_topic_tokenise</function></funcdef>
			<paramdef><parameter>const char *subtopic</parameter></paramdef>
			<paramdef><parameter>char ***topics</parameter></paramdef>
			<paramdef><parameter>int *count</parameter></paramdef>
			</funcprototype></funcsynopsis>

			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_sub_topic_tokens_free</function></funcdef>
			<paramdef><parameter>char ***topics</parameter></paramdef>
			<paramdef><parameter>int count</parameter></paramdef>
			</funcprototype></funcsynopsis>

			<funcsynopsis><funcprototype><funcdef>int <function>mosquitto_topic_matches_sub</function></funcdef>
			<paramdef><parameter>const char *sub</parameter></paramdef>
			<paramdef><parameter>const char *topic</parameter></paramdef>
			<paramdef><parameter>bool *result</parameter></paramdef>
			</funcprototype></funcsynopsis>
			</para>
		</refsect2>
	</refsect1>

	<refsect1>
		<title>Examples</title>
		<para><programlisting language="C">
#include &lt;stdio.h&gt;
#include &lt;mosquitto.h&gt;

void my_message_callback(struct mosquitto *mosq, void *obj, const struct mosquitto_message *message)
{
	if(message->payloadlen){
		printf("%s %s\n", message->topic, message->payload);
	}else{
		printf("%s (null)\n", message->topic);
	}
	fflush(stdout);
}

void my_connect_callback(struct mosquitto *mosq, void *obj, int result)
{
	int i;
	if(!result){
		/* Subscribe to broker information topics on successful connect. */
		mosquitto_subscribe(mosq, NULL, "$SYS/#", 2);
	}else{
		fprintf(stderr, "Connect failed\n");
	}
}

void my_subscribe_callback(struct mosquitto *mosq, void *obj, int mid, int qos_count, const int *granted_qos)
{
	int i;

	printf("Subscribed (mid: %d): %d", mid, granted_qos[0]);
	for(i=1; i&lt;qos_count; i++){
		printf(", %d", granted_qos[i]);
	}
	printf("\n");
}

void my_log_callback(struct mosquitto *mosq, void *obj, int level, const char *str)
{
	/* Pring all log messages regardless of level. */
	printf("%s\n", str);
}

int main(int argc, char *argv[])
{
	char id[30];
	int i;
	char *host = "localhost";
	int port = 1883;
	int keepalive = 60;
	bool clean_session = true;
	struct mosquitto *mosq = NULL;

	mosquitto_lib_init();
	mosq = mosquitto_new(id, clean_session, NULL);
	if(!mosq){
		fprintf(stderr, "Error: Out of memory.\n");
		return 1;
	}
	mosquitto_log_callback_set(mosq, my_log_callback);

	mosquitto_connect_callback_set(mosq, my_connect_callback);
	mosquitto_message_callback_set(mosq, my_message_callback);
	mosquitto_subscribe_callback_set(mosq, my_subscribe_callback);

	if(mosquitto_connect(mosq, host, port, keepalive)){
		fprintf(stderr, "Unable to connect.\n");
		return 1;
	}

	while(!mosquitto_loop(mosq, -1)){
	}
	mosquitto_destroy(mosq);
	mosquitto_lib_cleanup();
	return 0;
}
		</programlisting></para>
	</refsect1>
	<refsect1>
		<title>See Also</title>
		<para>
			<citerefentry>
				<refentrytitle><link xlink:href="mosquitto-8.html">mosquitto</link></refentrytitle>
				<manvolnum>8</manvolnum>
			</citerefentry>
			<citerefentry>
				<refentrytitle><link xlink:href="mqtt-7.html">mqtt</link></refentrytitle>
				<manvolnum>7</manvolnum>
			</citerefentry>
		</para>
	</refsect1>

	<refsect1>
		<title>Acknowledgements</title>
		<para>This product includes software developed by the OpenSSL Project
			for use in the OpenSSL Toolkit. (http://www.openssl.org/)</para>
		<para>This product includes cryptographic software written by Eric
			Young (eay@cryptsoft.com)</para>
		<para>This product includes software written by Tim Hudson
			(tjh@cryptsoft.com)</para>
	</refsect1>

	<refsect1>
		<title>Author</title>
		<para>Roger Light <email>roger@atchoo.org</email></para>
	</refsect1>
</refentry>
